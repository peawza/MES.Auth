// <auto-generated />
using System;
using Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ApplicationPostgreSQLDB.Migrations.System
{
    [DbContext(typeof(SystemDbContext))]
    partial class SystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Application.Models.tb_Application", b =>
                {
                    b.Property<string>("AppCode")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(256)");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer")
                        .HasComment("Create By");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("DATE")
                        .HasComment("Create Date");

                    b.HasKey("AppCode");

                    b.ToTable("tb_Application", "public");
                });

            modelBuilder.Entity("Application.Models.tb_LocalizedMessages", b =>
                {
                    b.Property<string>("MessageCode")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("MessageType")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MessageNameEN")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("MessageNameTH")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("Remark")
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("MessageCode", "MessageType");

                    b.ToTable("tb_LocalizedMessages", "public");
                });

            modelBuilder.Entity("Application.Models.tb_LocalizedResources", b =>
                {
                    b.Property<string>("ScreenCode")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("ObjectID")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Remark")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<string>("ResourcesEN")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<string>("ResourcesTH")
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("ScreenCode", "ObjectID");

                    b.ToTable("tb_LocalizedResources", "public");
                });

            modelBuilder.Entity("Application.Models.tb_MenuName", b =>
                {
                    b.Property<string>("AppCode")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer")
                        .HasComment("Running Unique Record Id");

                    b.Property<string>("Language")
                        .HasColumnType("VARCHAR(10)")
                        .HasComment("Language Code such as en-US, th-TH");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasComment("Menu Name of Language");

                    b.HasKey("AppCode", "MenuId", "Language");

                    b.ToTable("tb_MenuName", "public");
                });

            modelBuilder.Entity("Application.Models.tb_MenuSetting", b =>
                {
                    b.Property<string>("AppCode")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer")
                        .HasComment("Running Unique Record Id");

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer")
                        .HasComment("Create By");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("DATE")
                        .HasComment("Create Date");

                    b.Property<string>("ImageIcon")
                        .HasColumnType("VARCHAR(50)")
                        .HasComment("Screen Icon Name");

                    b.Property<string>("MenuType")
                        .IsRequired()
                        .HasColumnType("CHAR(1)")
                        .HasComment("G = Group Folder, I = Item");

                    b.Property<string>("MenuURL")
                        .HasColumnType("VARCHAR(255)")
                        .HasComment("Link");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("integer")
                        .HasComment("Parent Menu Id");

                    b.Property<string>("ScreenId")
                        .HasColumnType("VARCHAR(10)")
                        .HasComment("Screen Id");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasComment("Sequence No. (Re-Order every updating)");

                    b.Property<int>("UpdateBy")
                        .HasColumnType("integer")
                        .HasComment("Update By");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("DATE")
                        .HasComment("Update Date");

                    b.HasKey("AppCode", "MenuId");

                    b.HasIndex("AppCode", "ScreenId");

                    b.ToTable("tb_MenuSetting", "public");
                });

            modelBuilder.Entity("Application.Models.tb_Permission", b =>
                {
                    b.Property<string>("PermissionCode")
                        .HasColumnType("VARCHAR(10)")
                        .HasComment("Permission Code");

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer")
                        .HasComment("Create By");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("DATE")
                        .HasComment("Create Date");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR")
                        .HasComment("Permission Description");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasComment("Sequence No. for sorting display list.");

                    b.Property<int>("UpdateBy")
                        .HasColumnType("integer")
                        .HasComment("Update By");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("DATE")
                        .HasComment("Update Date");

                    b.HasKey("PermissionCode");

                    b.ToTable("tb_Permission", "public");
                });

            modelBuilder.Entity("Application.Models.tb_PermissionName", b =>
                {
                    b.Property<string>("PermissionCode")
                        .HasColumnType("VARCHAR(10)")
                        .HasComment("Permission Code");

                    b.Property<string>("Language")
                        .HasColumnType("VARCHAR(10)")
                        .HasComment("Language Code such as en-US, th-TH");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasComment("Screen Name of Language");

                    b.HasKey("PermissionCode", "Language");

                    b.ToTable("tb_PermissionName", "public");
                });

            modelBuilder.Entity("Application.Models.tb_Screen", b =>
                {
                    b.Property<string>("AppCode")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("ScreenId")
                        .HasColumnType("VARCHAR(10)")
                        .HasComment("Screen Id");

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer")
                        .HasComment("Create By");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("DATE")
                        .HasComment("Create Date");

                    b.Property<string>("ImageIcon")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasComment("Screen Icon Name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasComment("Screen Path");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasComment("Sequence No. for sorting display list.");

                    b.Property<int>("UpdateBy")
                        .HasColumnType("integer")
                        .HasComment("Update By");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("DATE")
                        .HasComment("Update Date");

                    b.HasKey("AppCode", "ScreenId");

                    b.ToTable("tb_Screen", "public");
                });

            modelBuilder.Entity("Application.Models.tb_ScreenName", b =>
                {
                    b.Property<string>("AppCode")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("ScreenId")
                        .HasColumnType("VARCHAR(10)")
                        .HasComment("Screen Id");

                    b.Property<string>("Language")
                        .HasColumnType("VARCHAR(10)")
                        .HasComment("Language Code such as en-US, th-TH");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasComment("Menu Name of Language");

                    b.HasKey("AppCode", "ScreenId", "Language");

                    b.ToTable("tb_ScreenName", "public");
                });

            modelBuilder.Entity("Application.Models.tb_ScreenPermission", b =>
                {
                    b.Property<string>("AppCode")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("ScreenId")
                        .HasColumnType("VARCHAR(10)")
                        .HasComment("Screen Id");

                    b.Property<string>("PermissionCode")
                        .HasColumnType("VARCHAR(10)")
                        .HasComment("Permission Code");

                    b.HasKey("AppCode", "ScreenId", "PermissionCode");

                    b.HasIndex("PermissionCode");

                    b.ToTable("tb_ScreenPermission", "public");
                });

            modelBuilder.Entity("Application.Models.tb_MenuName", b =>
                {
                    b.HasOne("Application.Models.tb_MenuSetting", "MenuSetting")
                        .WithMany("MenuNames")
                        .HasForeignKey("AppCode", "MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuSetting");
                });

            modelBuilder.Entity("Application.Models.tb_MenuSetting", b =>
                {
                    b.HasOne("Application.Models.tb_Screen", "Screen")
                        .WithMany("MenuSettings")
                        .HasForeignKey("AppCode", "ScreenId");

                    b.Navigation("Screen");
                });

            modelBuilder.Entity("Application.Models.tb_PermissionName", b =>
                {
                    b.HasOne("Application.Models.tb_Permission", "Permission")
                        .WithMany("PermissionNames")
                        .HasForeignKey("PermissionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Application.Models.tb_ScreenName", b =>
                {
                    b.HasOne("Application.Models.tb_Screen", "Screen")
                        .WithMany("ScreenNames")
                        .HasForeignKey("AppCode", "ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screen");
                });

            modelBuilder.Entity("Application.Models.tb_ScreenPermission", b =>
                {
                    b.HasOne("Application.Models.tb_Permission", "Permission")
                        .WithMany("ScreenPermissions")
                        .HasForeignKey("PermissionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Models.tb_Screen", "Screen")
                        .WithMany("ScreenPermissions")
                        .HasForeignKey("AppCode", "ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Screen");
                });

            modelBuilder.Entity("Application.Models.tb_MenuSetting", b =>
                {
                    b.Navigation("MenuNames");
                });

            modelBuilder.Entity("Application.Models.tb_Permission", b =>
                {
                    b.Navigation("PermissionNames");

                    b.Navigation("ScreenPermissions");
                });

            modelBuilder.Entity("Application.Models.tb_Screen", b =>
                {
                    b.Navigation("MenuSettings");

                    b.Navigation("ScreenNames");

                    b.Navigation("ScreenPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
